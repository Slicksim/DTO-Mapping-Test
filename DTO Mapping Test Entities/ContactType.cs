//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessEntityContact))]
    public partial class ContactType
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ContactTypeID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Name
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<BusinessEntityContact> BusinessEntityContacts
        {
            get
            {
                if (_businessEntityContacts == null)
                {
                    var newCollection = new FixupCollection<BusinessEntityContact>();
                    newCollection.CollectionChanged += FixupBusinessEntityContacts;
                    _businessEntityContacts = newCollection;
                }
                return _businessEntityContacts;
            }
            set
            {
                if (!ReferenceEquals(_businessEntityContacts, value))
                {
                    var previousValue = _businessEntityContacts as FixupCollection<BusinessEntityContact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBusinessEntityContacts;
                    }
                    _businessEntityContacts = value;
                    var newValue = value as FixupCollection<BusinessEntityContact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBusinessEntityContacts;
                    }
                }
            }
        }
        private ICollection<BusinessEntityContact> _businessEntityContacts;

        #endregion
        #region Association Fixup
    
        private void FixupBusinessEntityContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BusinessEntityContact item in e.NewItems)
                {
                    item.ContactType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BusinessEntityContact item in e.OldItems)
                {
                    if (ReferenceEquals(item.ContactType, this))
                    {
                        item.ContactType = null;
                    }
                }
            }
        }

        #endregion
    }
}
