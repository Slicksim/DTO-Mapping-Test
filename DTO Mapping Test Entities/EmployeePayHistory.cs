//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employee))]
    public partial class EmployeePayHistory
    {
        #region Primitive Properties
        [DataMember]
        public virtual int BusinessEntityID
        {
            get { return _businessEntityID; }
            set
            {
                if (_businessEntityID != value)
                {
                    if (Employee != null && Employee.BusinessEntityID != value)
                    {
                        Employee = null;
                    }
                    _businessEntityID = value;
                }
            }
        }
        private int _businessEntityID;
        [DataMember]
        public virtual System.DateTime RateChangeDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal Rate
        {
            get;
            set;
        }
        [DataMember]
        public virtual byte PayFrequency
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Employee Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                }
            }
        }
        private Employee _employee;

        #endregion
        #region Association Fixup
    
        private void FixupEmployee(Employee previousValue)
        {
            if (previousValue != null && previousValue.EmployeePayHistories.Contains(this))
            {
                previousValue.EmployeePayHistories.Remove(this);
            }
    
            if (Employee != null)
            {
                if (!Employee.EmployeePayHistories.Contains(this))
                {
                    Employee.EmployeePayHistories.Add(this);
                }
                if (BusinessEntityID != Employee.BusinessEntityID)
                {
                    BusinessEntityID = Employee.BusinessEntityID;
                }
            }
        }

        #endregion
    }
}
