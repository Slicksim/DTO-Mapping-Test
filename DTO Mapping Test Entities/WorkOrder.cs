//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Product))]
    [KnownType(typeof(ScrapReason))]
    [KnownType(typeof(WorkOrderRouting))]
    public partial class WorkOrder
    {
        #region Primitive Properties
        [DataMember]
        public virtual int WorkOrderID
        {
            get;
            set;
        }
        [DataMember]
        public virtual int ProductID
        {
            get { return _productID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_productID != value)
                    {
                        if (Product != null && Product.ProductID != value)
                        {
                            Product = null;
                        }
                        _productID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _productID;
        [DataMember]
        public virtual int OrderQty
        {
            get;
            set;
        }
        [DataMember]
        public virtual int StockedQty
        {
            get;
            set;
        }
        [DataMember]
        public virtual short ScrappedQty
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime DueDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<short> ScrapReasonID
        {
            get { return _scrapReasonID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_scrapReasonID != value)
                    {
                        if (ScrapReason != null && ScrapReason.ScrapReasonID != value)
                        {
                            ScrapReason = null;
                        }
                        _scrapReasonID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<short> _scrapReasonID;
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                }
            }
        }
        private Product _product;
        
    
        [DataMember]
        public virtual ScrapReason ScrapReason
        {
            get { return _scrapReason; }
            set
            {
                if (!ReferenceEquals(_scrapReason, value))
                {
                    var previousValue = _scrapReason;
                    _scrapReason = value;
                    FixupScrapReason(previousValue);
                }
            }
        }
        private ScrapReason _scrapReason;
        
    
        [DataMember]
        public virtual ICollection<WorkOrderRouting> WorkOrderRoutings
        {
            get
            {
                if (_workOrderRoutings == null)
                {
                    var newCollection = new FixupCollection<WorkOrderRouting>();
                    newCollection.CollectionChanged += FixupWorkOrderRoutings;
                    _workOrderRoutings = newCollection;
                }
                return _workOrderRoutings;
            }
            set
            {
                if (!ReferenceEquals(_workOrderRoutings, value))
                {
                    var previousValue = _workOrderRoutings as FixupCollection<WorkOrderRouting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWorkOrderRoutings;
                    }
                    _workOrderRoutings = value;
                    var newValue = value as FixupCollection<WorkOrderRouting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWorkOrderRoutings;
                    }
                }
            }
        }
        private ICollection<WorkOrderRouting> _workOrderRoutings;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupProduct(Product previousValue)
        {
            if (previousValue != null && previousValue.WorkOrders.Contains(this))
            {
                previousValue.WorkOrders.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.WorkOrders.Contains(this))
                {
                    Product.WorkOrders.Add(this);
                }
                if (ProductID != Product.ProductID)
                {
                    ProductID = Product.ProductID;
                }
            }
        }
    
        private void FixupScrapReason(ScrapReason previousValue)
        {
            if (previousValue != null && previousValue.WorkOrders.Contains(this))
            {
                previousValue.WorkOrders.Remove(this);
            }
    
            if (ScrapReason != null)
            {
                if (!ScrapReason.WorkOrders.Contains(this))
                {
                    ScrapReason.WorkOrders.Add(this);
                }
                if (ScrapReasonID != ScrapReason.ScrapReasonID)
                {
                    ScrapReasonID = ScrapReason.ScrapReasonID;
                }
            }
            else if (!_settingFK)
            {
                ScrapReasonID = null;
            }
        }
    
        private void FixupWorkOrderRoutings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WorkOrderRouting item in e.NewItems)
                {
                    item.WorkOrder = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkOrderRouting item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkOrder, this))
                    {
                        item.WorkOrder = null;
                    }
                }
            }
        }

        #endregion
    }
}
