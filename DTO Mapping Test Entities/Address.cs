//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(StateProvince))]
    [KnownType(typeof(BusinessEntityAddress))]
    [KnownType(typeof(SalesOrderHeader))]
    public partial class Address
    {
        #region Primitive Properties
        [DataMember]
        public virtual int AddressID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string AddressLine1
        {
            get;
            set;
        }
        [DataMember]
        public virtual string AddressLine2
        {
            get;
            set;
        }
        [DataMember]
        public virtual string City
        {
            get;
            set;
        }
        [DataMember]
        public virtual int StateProvinceID
        {
            get { return _stateProvinceID; }
            set
            {
                if (_stateProvinceID != value)
                {
                    if (StateProvince != null && StateProvince.StateProvinceID != value)
                    {
                        StateProvince = null;
                    }
                    _stateProvinceID = value;
                }
            }
        }
        private int _stateProvinceID;
        [DataMember]
        public virtual string PostalCode
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.Guid rowguid
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual StateProvince StateProvince
        {
            get { return _stateProvince; }
            set
            {
                if (!ReferenceEquals(_stateProvince, value))
                {
                    var previousValue = _stateProvince;
                    _stateProvince = value;
                    FixupStateProvince(previousValue);
                }
            }
        }
        private StateProvince _stateProvince;
        
    
        [DataMember]
        public virtual ICollection<BusinessEntityAddress> BusinessEntityAddresses
        {
            get
            {
                if (_businessEntityAddresses == null)
                {
                    var newCollection = new FixupCollection<BusinessEntityAddress>();
                    newCollection.CollectionChanged += FixupBusinessEntityAddresses;
                    _businessEntityAddresses = newCollection;
                }
                return _businessEntityAddresses;
            }
            set
            {
                if (!ReferenceEquals(_businessEntityAddresses, value))
                {
                    var previousValue = _businessEntityAddresses as FixupCollection<BusinessEntityAddress>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBusinessEntityAddresses;
                    }
                    _businessEntityAddresses = value;
                    var newValue = value as FixupCollection<BusinessEntityAddress>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBusinessEntityAddresses;
                    }
                }
            }
        }
        private ICollection<BusinessEntityAddress> _businessEntityAddresses;
        
    
        [DataMember]
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders
        {
            get
            {
                if (_salesOrderHeaders == null)
                {
                    var newCollection = new FixupCollection<SalesOrderHeader>();
                    newCollection.CollectionChanged += FixupSalesOrderHeaders;
                    _salesOrderHeaders = newCollection;
                }
                return _salesOrderHeaders;
            }
            set
            {
                if (!ReferenceEquals(_salesOrderHeaders, value))
                {
                    var previousValue = _salesOrderHeaders as FixupCollection<SalesOrderHeader>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesOrderHeaders;
                    }
                    _salesOrderHeaders = value;
                    var newValue = value as FixupCollection<SalesOrderHeader>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesOrderHeaders;
                    }
                }
            }
        }
        private ICollection<SalesOrderHeader> _salesOrderHeaders;
        
    
        [DataMember]
        public virtual ICollection<SalesOrderHeader> SalesOrderHeaders1
        {
            get
            {
                if (_salesOrderHeaders1 == null)
                {
                    var newCollection = new FixupCollection<SalesOrderHeader>();
                    newCollection.CollectionChanged += FixupSalesOrderHeaders1;
                    _salesOrderHeaders1 = newCollection;
                }
                return _salesOrderHeaders1;
            }
            set
            {
                if (!ReferenceEquals(_salesOrderHeaders1, value))
                {
                    var previousValue = _salesOrderHeaders1 as FixupCollection<SalesOrderHeader>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesOrderHeaders1;
                    }
                    _salesOrderHeaders1 = value;
                    var newValue = value as FixupCollection<SalesOrderHeader>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesOrderHeaders1;
                    }
                }
            }
        }
        private ICollection<SalesOrderHeader> _salesOrderHeaders1;

        #endregion
        #region Association Fixup
    
        private void FixupStateProvince(StateProvince previousValue)
        {
            if (previousValue != null && previousValue.Addresses.Contains(this))
            {
                previousValue.Addresses.Remove(this);
            }
    
            if (StateProvince != null)
            {
                if (!StateProvince.Addresses.Contains(this))
                {
                    StateProvince.Addresses.Add(this);
                }
                if (StateProvinceID != StateProvince.StateProvinceID)
                {
                    StateProvinceID = StateProvince.StateProvinceID;
                }
            }
        }
    
        private void FixupBusinessEntityAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BusinessEntityAddress item in e.NewItems)
                {
                    item.Address = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BusinessEntityAddress item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address, this))
                    {
                        item.Address = null;
                    }
                }
            }
        }
    
        private void FixupSalesOrderHeaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesOrderHeader item in e.NewItems)
                {
                    item.Address = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesOrderHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address, this))
                    {
                        item.Address = null;
                    }
                }
            }
        }
    
        private void FixupSalesOrderHeaders1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesOrderHeader item in e.NewItems)
                {
                    item.Address1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesOrderHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address1, this))
                    {
                        item.Address1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
