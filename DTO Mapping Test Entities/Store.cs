//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessEntity))]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(SalesPerson))]
    public partial class Store
    {
        #region Primitive Properties
        [DataMember]
        public virtual int BusinessEntityID
        {
            get { return _businessEntityID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_businessEntityID != value)
                    {
                        if (BusinessEntity != null && BusinessEntity.BusinessEntityID != value)
                        {
                            BusinessEntity = null;
                        }
                        _businessEntityID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _businessEntityID;
        [DataMember]
        public virtual string Name
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> SalesPersonID
        {
            get { return _salesPersonID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_salesPersonID != value)
                    {
                        if (SalesPerson != null && SalesPerson.BusinessEntityID != value)
                        {
                            SalesPerson = null;
                        }
                        _salesPersonID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _salesPersonID;
        [DataMember]
        public virtual string Demographics
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.Guid rowguid
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual BusinessEntity BusinessEntity
        {
            get { return _businessEntity; }
            set
            {
                if (!ReferenceEquals(_businessEntity, value))
                {
                    var previousValue = _businessEntity;
                    _businessEntity = value;
                    FixupBusinessEntity(previousValue);
                }
            }
        }
        private BusinessEntity _businessEntity;
        
    
        [DataMember]
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
                }
            }
        }
        private ICollection<Customer> _customers;
        
    
        [DataMember]
        public virtual SalesPerson SalesPerson
        {
            get { return _salesPerson; }
            set
            {
                if (!ReferenceEquals(_salesPerson, value))
                {
                    var previousValue = _salesPerson;
                    _salesPerson = value;
                    FixupSalesPerson(previousValue);
                }
            }
        }
        private SalesPerson _salesPerson;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupBusinessEntity(BusinessEntity previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Store, this))
            {
                previousValue.Store = null;
            }
    
            if (BusinessEntity != null)
            {
                BusinessEntity.Store = this;
                if (BusinessEntityID != BusinessEntity.BusinessEntityID)
                {
                    BusinessEntityID = BusinessEntity.BusinessEntityID;
                }
            }
        }
    
        private void FixupSalesPerson(SalesPerson previousValue)
        {
            if (previousValue != null && previousValue.Stores.Contains(this))
            {
                previousValue.Stores.Remove(this);
            }
    
            if (SalesPerson != null)
            {
                if (!SalesPerson.Stores.Contains(this))
                {
                    SalesPerson.Stores.Add(this);
                }
                if (SalesPersonID != SalesPerson.BusinessEntityID)
                {
                    SalesPersonID = SalesPerson.BusinessEntityID;
                }
            }
            else if (!_settingFK)
            {
                SalesPersonID = null;
            }
        }
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Store = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Store, this))
                    {
                        item.Store = null;
                    }
                }
            }
        }

        #endregion
    }
}
