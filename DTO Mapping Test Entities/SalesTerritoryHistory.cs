//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SalesPerson))]
    [KnownType(typeof(SalesTerritory))]
    public partial class SalesTerritoryHistory
    {
        #region Primitive Properties
        [DataMember]
        public virtual int BusinessEntityID
        {
            get { return _businessEntityID; }
            set
            {
                if (_businessEntityID != value)
                {
                    if (SalesPerson != null && SalesPerson.BusinessEntityID != value)
                    {
                        SalesPerson = null;
                    }
                    _businessEntityID = value;
                }
            }
        }
        private int _businessEntityID;
        [DataMember]
        public virtual int TerritoryID
        {
            get { return _territoryID; }
            set
            {
                if (_territoryID != value)
                {
                    if (SalesTerritory != null && SalesTerritory.TerritoryID != value)
                    {
                        SalesTerritory = null;
                    }
                    _territoryID = value;
                }
            }
        }
        private int _territoryID;
        [DataMember]
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.Guid rowguid
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual SalesPerson SalesPerson
        {
            get { return _salesPerson; }
            set
            {
                if (!ReferenceEquals(_salesPerson, value))
                {
                    var previousValue = _salesPerson;
                    _salesPerson = value;
                    FixupSalesPerson(previousValue);
                }
            }
        }
        private SalesPerson _salesPerson;
        
    
        [DataMember]
        public virtual SalesTerritory SalesTerritory
        {
            get { return _salesTerritory; }
            set
            {
                if (!ReferenceEquals(_salesTerritory, value))
                {
                    var previousValue = _salesTerritory;
                    _salesTerritory = value;
                    FixupSalesTerritory(previousValue);
                }
            }
        }
        private SalesTerritory _salesTerritory;

        #endregion
        #region Association Fixup
    
        private void FixupSalesPerson(SalesPerson previousValue)
        {
            if (previousValue != null && previousValue.SalesTerritoryHistories.Contains(this))
            {
                previousValue.SalesTerritoryHistories.Remove(this);
            }
    
            if (SalesPerson != null)
            {
                if (!SalesPerson.SalesTerritoryHistories.Contains(this))
                {
                    SalesPerson.SalesTerritoryHistories.Add(this);
                }
                if (BusinessEntityID != SalesPerson.BusinessEntityID)
                {
                    BusinessEntityID = SalesPerson.BusinessEntityID;
                }
            }
        }
    
        private void FixupSalesTerritory(SalesTerritory previousValue)
        {
            if (previousValue != null && previousValue.SalesTerritoryHistories.Contains(this))
            {
                previousValue.SalesTerritoryHistories.Remove(this);
            }
    
            if (SalesTerritory != null)
            {
                if (!SalesTerritory.SalesTerritoryHistories.Contains(this))
                {
                    SalesTerritory.SalesTerritoryHistories.Add(this);
                }
                if (TerritoryID != SalesTerritory.TerritoryID)
                {
                    TerritoryID = SalesTerritory.TerritoryID;
                }
            }
        }

        #endregion
    }
}
