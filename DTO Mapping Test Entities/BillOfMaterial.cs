//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Product))]
    [KnownType(typeof(UnitMeasure))]
    public partial class BillOfMaterial
    {
        #region Primitive Properties
        [DataMember]
        public virtual int BillOfMaterialsID
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> ProductAssemblyID
        {
            get { return _productAssemblyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_productAssemblyID != value)
                    {
                        if (Product1 != null && Product1.ProductID != value)
                        {
                            Product1 = null;
                        }
                        _productAssemblyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _productAssemblyID;
        [DataMember]
        public virtual int ComponentID
        {
            get { return _componentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_componentID != value)
                    {
                        if (Product != null && Product.ProductID != value)
                        {
                            Product = null;
                        }
                        _componentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _componentID;
        [DataMember]
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string UnitMeasureCode
        {
            get { return _unitMeasureCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_unitMeasureCode != value)
                    {
                        if (UnitMeasure != null && UnitMeasure.UnitMeasureCode != value)
                        {
                            UnitMeasure = null;
                        }
                        _unitMeasureCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _unitMeasureCode;
        [DataMember]
        public virtual short BOMLevel
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal PerAssemblyQty
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                }
            }
        }
        private Product _product;
        
    
        [DataMember]
        public virtual Product Product1
        {
            get { return _product1; }
            set
            {
                if (!ReferenceEquals(_product1, value))
                {
                    var previousValue = _product1;
                    _product1 = value;
                    FixupProduct1(previousValue);
                }
            }
        }
        private Product _product1;
        
    
        [DataMember]
        public virtual UnitMeasure UnitMeasure
        {
            get { return _unitMeasure; }
            set
            {
                if (!ReferenceEquals(_unitMeasure, value))
                {
                    var previousValue = _unitMeasure;
                    _unitMeasure = value;
                    FixupUnitMeasure(previousValue);
                }
            }
        }
        private UnitMeasure _unitMeasure;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupProduct(Product previousValue)
        {
            if (previousValue != null && previousValue.BillOfMaterials.Contains(this))
            {
                previousValue.BillOfMaterials.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.BillOfMaterials.Contains(this))
                {
                    Product.BillOfMaterials.Add(this);
                }
                if (ComponentID != Product.ProductID)
                {
                    ComponentID = Product.ProductID;
                }
            }
        }
    
        private void FixupProduct1(Product previousValue)
        {
            if (previousValue != null && previousValue.BillOfMaterials1.Contains(this))
            {
                previousValue.BillOfMaterials1.Remove(this);
            }
    
            if (Product1 != null)
            {
                if (!Product1.BillOfMaterials1.Contains(this))
                {
                    Product1.BillOfMaterials1.Add(this);
                }
                if (ProductAssemblyID != Product1.ProductID)
                {
                    ProductAssemblyID = Product1.ProductID;
                }
            }
            else if (!_settingFK)
            {
                ProductAssemblyID = null;
            }
        }
    
        private void FixupUnitMeasure(UnitMeasure previousValue)
        {
            if (previousValue != null && previousValue.BillOfMaterials.Contains(this))
            {
                previousValue.BillOfMaterials.Remove(this);
            }
    
            if (UnitMeasure != null)
            {
                if (!UnitMeasure.BillOfMaterials.Contains(this))
                {
                    UnitMeasure.BillOfMaterials.Add(this);
                }
                if (UnitMeasureCode != UnitMeasure.UnitMeasureCode)
                {
                    UnitMeasureCode = UnitMeasure.UnitMeasureCode;
                }
            }
        }

        #endregion
    }
}
