//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BillOfMaterial))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(ProductVendor))]
    public partial class UnitMeasure
    {
        #region Primitive Properties
        [DataMember]
        public virtual string UnitMeasureCode
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Name
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<BillOfMaterial> BillOfMaterials
        {
            get
            {
                if (_billOfMaterials == null)
                {
                    var newCollection = new FixupCollection<BillOfMaterial>();
                    newCollection.CollectionChanged += FixupBillOfMaterials;
                    _billOfMaterials = newCollection;
                }
                return _billOfMaterials;
            }
            set
            {
                if (!ReferenceEquals(_billOfMaterials, value))
                {
                    var previousValue = _billOfMaterials as FixupCollection<BillOfMaterial>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBillOfMaterials;
                    }
                    _billOfMaterials = value;
                    var newValue = value as FixupCollection<BillOfMaterial>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBillOfMaterials;
                    }
                }
            }
        }
        private ICollection<BillOfMaterial> _billOfMaterials;
        
    
        [DataMember]
        public virtual ICollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                }
            }
        }
        private ICollection<Product> _products;
        
    
        [DataMember]
        public virtual ICollection<Product> Products1
        {
            get
            {
                if (_products1 == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts1;
                    _products1 = newCollection;
                }
                return _products1;
            }
            set
            {
                if (!ReferenceEquals(_products1, value))
                {
                    var previousValue = _products1 as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts1;
                    }
                    _products1 = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts1;
                    }
                }
            }
        }
        private ICollection<Product> _products1;
        
    
        [DataMember]
        public virtual ICollection<ProductVendor> ProductVendors
        {
            get
            {
                if (_productVendors == null)
                {
                    var newCollection = new FixupCollection<ProductVendor>();
                    newCollection.CollectionChanged += FixupProductVendors;
                    _productVendors = newCollection;
                }
                return _productVendors;
            }
            set
            {
                if (!ReferenceEquals(_productVendors, value))
                {
                    var previousValue = _productVendors as FixupCollection<ProductVendor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductVendors;
                    }
                    _productVendors = value;
                    var newValue = value as FixupCollection<ProductVendor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductVendors;
                    }
                }
            }
        }
        private ICollection<ProductVendor> _productVendors;

        #endregion
        #region Association Fixup
    
        private void FixupBillOfMaterials(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BillOfMaterial item in e.NewItems)
                {
                    item.UnitMeasure = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BillOfMaterial item in e.OldItems)
                {
                    if (ReferenceEquals(item.UnitMeasure, this))
                    {
                        item.UnitMeasure = null;
                    }
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.UnitMeasure = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.UnitMeasure, this))
                    {
                        item.UnitMeasure = null;
                    }
                }
            }
        }
    
        private void FixupProducts1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.UnitMeasure1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.UnitMeasure1, this))
                    {
                        item.UnitMeasure1 = null;
                    }
                }
            }
        }
    
        private void FixupProductVendors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductVendor item in e.NewItems)
                {
                    item.UnitMeasure = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductVendor item in e.OldItems)
                {
                    if (ReferenceEquals(item.UnitMeasure, this))
                    {
                        item.UnitMeasure = null;
                    }
                }
            }
        }

        #endregion
    }
}
