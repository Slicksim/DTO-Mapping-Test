//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Person))]
    [KnownType(typeof(EmployeeDepartmentHistory))]
    [KnownType(typeof(EmployeePayHistory))]
    [KnownType(typeof(JobCandidate))]
    [KnownType(typeof(PurchaseOrderHeader))]
    [KnownType(typeof(SalesPerson))]
    public partial class Employee
    {
        #region Primitive Properties
        [DataMember]
        public virtual int BusinessEntityID
        {
            get { return _businessEntityID; }
            set
            {
                if (_businessEntityID != value)
                {
                    if (Person != null && Person.BusinessEntityID != value)
                    {
                        Person = null;
                    }
                    _businessEntityID = value;
                }
            }
        }
        private int _businessEntityID;
        [DataMember]
        public virtual string NationalIDNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual string LoginID
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<short> OrganizationLevel
        {
            get;
            set;
        }
        [DataMember]
        public virtual string JobTitle
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime BirthDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual string MaritalStatus
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Gender
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime HireDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool SalariedFlag
        {
            get;
            set;
        }
        [DataMember]
        public virtual short VacationHours
        {
            get;
            set;
        }
        [DataMember]
        public virtual short SickLeaveHours
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool CurrentFlag
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.Guid rowguid
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                }
            }
        }
        private Person _person;
        
    
        [DataMember]
        public virtual ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories
        {
            get
            {
                if (_employeeDepartmentHistories == null)
                {
                    var newCollection = new FixupCollection<EmployeeDepartmentHistory>();
                    newCollection.CollectionChanged += FixupEmployeeDepartmentHistories;
                    _employeeDepartmentHistories = newCollection;
                }
                return _employeeDepartmentHistories;
            }
            set
            {
                if (!ReferenceEquals(_employeeDepartmentHistories, value))
                {
                    var previousValue = _employeeDepartmentHistories as FixupCollection<EmployeeDepartmentHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeDepartmentHistories;
                    }
                    _employeeDepartmentHistories = value;
                    var newValue = value as FixupCollection<EmployeeDepartmentHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeDepartmentHistories;
                    }
                }
            }
        }
        private ICollection<EmployeeDepartmentHistory> _employeeDepartmentHistories;
        
    
        [DataMember]
        public virtual ICollection<EmployeePayHistory> EmployeePayHistories
        {
            get
            {
                if (_employeePayHistories == null)
                {
                    var newCollection = new FixupCollection<EmployeePayHistory>();
                    newCollection.CollectionChanged += FixupEmployeePayHistories;
                    _employeePayHistories = newCollection;
                }
                return _employeePayHistories;
            }
            set
            {
                if (!ReferenceEquals(_employeePayHistories, value))
                {
                    var previousValue = _employeePayHistories as FixupCollection<EmployeePayHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeePayHistories;
                    }
                    _employeePayHistories = value;
                    var newValue = value as FixupCollection<EmployeePayHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeePayHistories;
                    }
                }
            }
        }
        private ICollection<EmployeePayHistory> _employeePayHistories;
        
    
        [DataMember]
        public virtual ICollection<JobCandidate> JobCandidates
        {
            get
            {
                if (_jobCandidates == null)
                {
                    var newCollection = new FixupCollection<JobCandidate>();
                    newCollection.CollectionChanged += FixupJobCandidates;
                    _jobCandidates = newCollection;
                }
                return _jobCandidates;
            }
            set
            {
                if (!ReferenceEquals(_jobCandidates, value))
                {
                    var previousValue = _jobCandidates as FixupCollection<JobCandidate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobCandidates;
                    }
                    _jobCandidates = value;
                    var newValue = value as FixupCollection<JobCandidate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobCandidates;
                    }
                }
            }
        }
        private ICollection<JobCandidate> _jobCandidates;
        
    
        [DataMember]
        public virtual ICollection<PurchaseOrderHeader> PurchaseOrderHeaders
        {
            get
            {
                if (_purchaseOrderHeaders == null)
                {
                    var newCollection = new FixupCollection<PurchaseOrderHeader>();
                    newCollection.CollectionChanged += FixupPurchaseOrderHeaders;
                    _purchaseOrderHeaders = newCollection;
                }
                return _purchaseOrderHeaders;
            }
            set
            {
                if (!ReferenceEquals(_purchaseOrderHeaders, value))
                {
                    var previousValue = _purchaseOrderHeaders as FixupCollection<PurchaseOrderHeader>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPurchaseOrderHeaders;
                    }
                    _purchaseOrderHeaders = value;
                    var newValue = value as FixupCollection<PurchaseOrderHeader>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPurchaseOrderHeaders;
                    }
                }
            }
        }
        private ICollection<PurchaseOrderHeader> _purchaseOrderHeaders;
        
    
        [DataMember]
        public virtual SalesPerson SalesPerson
        {
            get { return _salesPerson; }
            set
            {
                if (!ReferenceEquals(_salesPerson, value))
                {
                    var previousValue = _salesPerson;
                    _salesPerson = value;
                    FixupSalesPerson(previousValue);
                }
            }
        }
        private SalesPerson _salesPerson;

        #endregion
        #region Association Fixup
    
        private void FixupPerson(Person previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Employee, this))
            {
                previousValue.Employee = null;
            }
    
            if (Person != null)
            {
                Person.Employee = this;
                if (BusinessEntityID != Person.BusinessEntityID)
                {
                    BusinessEntityID = Person.BusinessEntityID;
                }
            }
        }
    
        private void FixupSalesPerson(SalesPerson previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Employee, this))
            {
                previousValue.Employee = null;
            }
    
            if (SalesPerson != null)
            {
                SalesPerson.Employee = this;
            }
        }
    
        private void FixupEmployeeDepartmentHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeDepartmentHistory item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeDepartmentHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupEmployeePayHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeePayHistory item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeePayHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupJobCandidates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobCandidate item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobCandidate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupPurchaseOrderHeaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PurchaseOrderHeader item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PurchaseOrderHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }

        #endregion
    }
}
