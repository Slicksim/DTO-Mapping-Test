//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTO_Mapping_Test_Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employee))]
    [KnownType(typeof(PurchaseOrderDetail))]
    [KnownType(typeof(ShipMethod))]
    [KnownType(typeof(Vendor))]
    public partial class PurchaseOrderHeader
    {
        #region Primitive Properties
        [DataMember]
        public virtual int PurchaseOrderID
        {
            get;
            set;
        }
        [DataMember]
        public virtual byte RevisionNumber
        {
            get;
            set;
        }
        [DataMember]
        public virtual byte Status
        {
            get;
            set;
        }
        [DataMember]
        public virtual int EmployeeID
        {
            get { return _employeeID; }
            set
            {
                if (_employeeID != value)
                {
                    if (Employee != null && Employee.BusinessEntityID != value)
                    {
                        Employee = null;
                    }
                    _employeeID = value;
                }
            }
        }
        private int _employeeID;
        [DataMember]
        public virtual int VendorID
        {
            get { return _vendorID; }
            set
            {
                if (_vendorID != value)
                {
                    if (Vendor != null && Vendor.BusinessEntityID != value)
                    {
                        Vendor = null;
                    }
                    _vendorID = value;
                }
            }
        }
        private int _vendorID;
        [DataMember]
        public virtual int ShipMethodID
        {
            get { return _shipMethodID; }
            set
            {
                if (_shipMethodID != value)
                {
                    if (ShipMethod != null && ShipMethod.ShipMethodID != value)
                    {
                        ShipMethod = null;
                    }
                    _shipMethodID = value;
                }
            }
        }
        private int _shipMethodID;
        [DataMember]
        public virtual System.DateTime OrderDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> ShipDate
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal SubTotal
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal TaxAmt
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal Freight
        {
            get;
            set;
        }
        [DataMember]
        public virtual decimal TotalDue
        {
            get;
            set;
        }
        [DataMember]
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Employee Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                }
            }
        }
        private Employee _employee;
        
    
        [DataMember]
        public virtual ICollection<PurchaseOrderDetail> PurchaseOrderDetails
        {
            get
            {
                if (_purchaseOrderDetails == null)
                {
                    var newCollection = new FixupCollection<PurchaseOrderDetail>();
                    newCollection.CollectionChanged += FixupPurchaseOrderDetails;
                    _purchaseOrderDetails = newCollection;
                }
                return _purchaseOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_purchaseOrderDetails, value))
                {
                    var previousValue = _purchaseOrderDetails as FixupCollection<PurchaseOrderDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPurchaseOrderDetails;
                    }
                    _purchaseOrderDetails = value;
                    var newValue = value as FixupCollection<PurchaseOrderDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPurchaseOrderDetails;
                    }
                }
            }
        }
        private ICollection<PurchaseOrderDetail> _purchaseOrderDetails;
        
    
        [DataMember]
        public virtual ShipMethod ShipMethod
        {
            get { return _shipMethod; }
            set
            {
                if (!ReferenceEquals(_shipMethod, value))
                {
                    var previousValue = _shipMethod;
                    _shipMethod = value;
                    FixupShipMethod(previousValue);
                }
            }
        }
        private ShipMethod _shipMethod;
        
    
        [DataMember]
        public virtual Vendor Vendor
        {
            get { return _vendor; }
            set
            {
                if (!ReferenceEquals(_vendor, value))
                {
                    var previousValue = _vendor;
                    _vendor = value;
                    FixupVendor(previousValue);
                }
            }
        }
        private Vendor _vendor;

        #endregion
        #region Association Fixup
    
        private void FixupEmployee(Employee previousValue)
        {
            if (previousValue != null && previousValue.PurchaseOrderHeaders.Contains(this))
            {
                previousValue.PurchaseOrderHeaders.Remove(this);
            }
    
            if (Employee != null)
            {
                if (!Employee.PurchaseOrderHeaders.Contains(this))
                {
                    Employee.PurchaseOrderHeaders.Add(this);
                }
                if (EmployeeID != Employee.BusinessEntityID)
                {
                    EmployeeID = Employee.BusinessEntityID;
                }
            }
        }
    
        private void FixupShipMethod(ShipMethod previousValue)
        {
            if (previousValue != null && previousValue.PurchaseOrderHeaders.Contains(this))
            {
                previousValue.PurchaseOrderHeaders.Remove(this);
            }
    
            if (ShipMethod != null)
            {
                if (!ShipMethod.PurchaseOrderHeaders.Contains(this))
                {
                    ShipMethod.PurchaseOrderHeaders.Add(this);
                }
                if (ShipMethodID != ShipMethod.ShipMethodID)
                {
                    ShipMethodID = ShipMethod.ShipMethodID;
                }
            }
        }
    
        private void FixupVendor(Vendor previousValue)
        {
            if (previousValue != null && previousValue.PurchaseOrderHeaders.Contains(this))
            {
                previousValue.PurchaseOrderHeaders.Remove(this);
            }
    
            if (Vendor != null)
            {
                if (!Vendor.PurchaseOrderHeaders.Contains(this))
                {
                    Vendor.PurchaseOrderHeaders.Add(this);
                }
                if (VendorID != Vendor.BusinessEntityID)
                {
                    VendorID = Vendor.BusinessEntityID;
                }
            }
        }
    
        private void FixupPurchaseOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PurchaseOrderDetail item in e.NewItems)
                {
                    item.PurchaseOrderHeader = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PurchaseOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.PurchaseOrderHeader, this))
                    {
                        item.PurchaseOrderHeader = null;
                    }
                }
            }
        }

        #endregion
    }
}
